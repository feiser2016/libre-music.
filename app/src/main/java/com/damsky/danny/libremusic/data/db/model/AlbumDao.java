package com.damsky.danny.libremusic.data.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "ALBUMS".
 */
public class AlbumDao extends AbstractDao<Album, Long> {

    public static final String TABLENAME = "ALBUMS";
    private DaoSession daoSession;
    private Query<Album> artist_AlbumsQuery;

    public AlbumDao(DaoConfig config) {
        super(config);
    }

    public AlbumDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALBUMS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ALBUM\" TEXT NOT NULL ," + // 1: album
                "\"ARTIST\" TEXT NOT NULL ," + // 2: artist
                "\"YEAR\" INTEGER NOT NULL ," + // 3: year
                "\"COVER\" TEXT NOT NULL );"); // 4: cover
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALBUMS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Album entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAlbum());
        stmt.bindString(3, entity.getArtist());
        stmt.bindLong(4, entity.getYear());
        stmt.bindString(5, entity.getCover());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Album entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAlbum());
        stmt.bindString(3, entity.getArtist());
        stmt.bindLong(4, entity.getYear());
        stmt.bindString(5, entity.getCover());
    }

    @Override
    protected final void attachEntity(Album entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Album readEntity(Cursor cursor, int offset) {
        Album entity = new Album( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // album
                cursor.getString(offset + 2), // artist
                cursor.getInt(offset + 3), // year
                cursor.getString(offset + 4) // cover
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Album entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAlbum(cursor.getString(offset + 1));
        entity.setArtist(cursor.getString(offset + 2));
        entity.setYear(cursor.getInt(offset + 3));
        entity.setCover(cursor.getString(offset + 4));
    }

    @Override
    protected final Long updateKeyAfterInsert(Album entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Album entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Album entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "albums" to-many relationship of Artist.
     */
    public List<Album> _queryArtist_Albums(String artist) {
        synchronized (this) {
            if (artist_AlbumsQuery == null) {
                QueryBuilder<Album> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Artist.eq(null));
                queryBuilder.orderRaw("T.'YEAR' ASC");
                artist_AlbumsQuery = queryBuilder.build();
            }
        }
        Query<Album> query = artist_AlbumsQuery.forCurrentThread();
        query.setParameter(0, artist);
        return query.list();
    }

    /**
     * Properties of entity Album.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Album = new Property(1, String.class, "album", false, "ALBUM");
        public final static Property Artist = new Property(2, String.class, "artist", false, "ARTIST");
        public final static Property Year = new Property(3, int.class, "year", false, "YEAR");
        public final static Property Cover = new Property(4, String.class, "cover", false, "COVER");
    }

}
