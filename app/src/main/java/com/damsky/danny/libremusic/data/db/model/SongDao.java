package com.damsky.danny.libremusic.data.db.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SONGS".
*/
public class SongDao extends AbstractDao<Song, Long> {

    public static final String TABLENAME = "SONGS";

    /**
     * Properties of entity Song.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Data = new Property(1, String.class, "data", false, "DATA");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Album = new Property(3, String.class, "album", false, "ALBUM");
        public final static Property Artist = new Property(4, String.class, "artist", false, "ARTIST");
        public final static Property Genre = new Property(5, String.class, "genre", false, "GENRE");
        public final static Property Track = new Property(6, int.class, "track", false, "TRACK");
        public final static Property Year = new Property(7, int.class, "year", false, "YEAR");
        public final static Property StartTime = new Property(8, int.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(9, int.class, "endTime", false, "END_TIME");
        public final static Property Duration = new Property(10, int.class, "duration", false, "DURATION");
        public final static Property Cover = new Property(11, String.class, "cover", false, "COVER");
    }

    private Query<Song> genre_SongsQuery;
    private Query<Song> playlist_SongsQuery;
    private Query<Song> album_SongsQuery;

    public SongDao(DaoConfig config) {
        super(config);
    }
    
    public SongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SONGS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATA\" TEXT NOT NULL ," + // 1: data
                "\"TITLE\" TEXT NOT NULL ," + // 2: title
                "\"ALBUM\" TEXT NOT NULL ," + // 3: album
                "\"ARTIST\" TEXT NOT NULL ," + // 4: artist
                "\"GENRE\" TEXT NOT NULL ," + // 5: genre
                "\"TRACK\" INTEGER NOT NULL ," + // 6: track
                "\"YEAR\" INTEGER NOT NULL ," + // 7: year
                "\"START_TIME\" INTEGER NOT NULL ," + // 8: startTime
                "\"END_TIME\" INTEGER NOT NULL ," + // 9: endTime
                "\"DURATION\" INTEGER NOT NULL ," + // 10: duration
                "\"COVER\" TEXT NOT NULL );"); // 11: cover
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SONGS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Song entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getData());
        stmt.bindString(3, entity.getTitle());
        stmt.bindString(4, entity.getAlbum());
        stmt.bindString(5, entity.getArtist());
        stmt.bindString(6, entity.getGenre());
        stmt.bindLong(7, entity.getTrack());
        stmt.bindLong(8, entity.getYear());
        stmt.bindLong(9, entity.getStartTime());
        stmt.bindLong(10, entity.getEndTime());
        stmt.bindLong(11, entity.getDuration());
        stmt.bindString(12, entity.getCover());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Song entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getData());
        stmt.bindString(3, entity.getTitle());
        stmt.bindString(4, entity.getAlbum());
        stmt.bindString(5, entity.getArtist());
        stmt.bindString(6, entity.getGenre());
        stmt.bindLong(7, entity.getTrack());
        stmt.bindLong(8, entity.getYear());
        stmt.bindLong(9, entity.getStartTime());
        stmt.bindLong(10, entity.getEndTime());
        stmt.bindLong(11, entity.getDuration());
        stmt.bindString(12, entity.getCover());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Song readEntity(Cursor cursor, int offset) {
        Song entity = new Song( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // data
            cursor.getString(offset + 2), // title
            cursor.getString(offset + 3), // album
            cursor.getString(offset + 4), // artist
            cursor.getString(offset + 5), // genre
            cursor.getInt(offset + 6), // track
            cursor.getInt(offset + 7), // year
            cursor.getInt(offset + 8), // startTime
            cursor.getInt(offset + 9), // endTime
            cursor.getInt(offset + 10), // duration
            cursor.getString(offset + 11) // cover
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Song entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setData(cursor.getString(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setAlbum(cursor.getString(offset + 3));
        entity.setArtist(cursor.getString(offset + 4));
        entity.setGenre(cursor.getString(offset + 5));
        entity.setTrack(cursor.getInt(offset + 6));
        entity.setYear(cursor.getInt(offset + 7));
        entity.setStartTime(cursor.getInt(offset + 8));
        entity.setEndTime(cursor.getInt(offset + 9));
        entity.setDuration(cursor.getInt(offset + 10));
        entity.setCover(cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Song entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Song entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Song entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "songs" to-many relationship of Genre. */
    public List<Song> _queryGenre_Songs(String genre) {
        synchronized (this) {
            if (genre_SongsQuery == null) {
                QueryBuilder<Song> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Genre.eq(null));
                queryBuilder.orderRaw("T.'ARTIST' ASC");
                genre_SongsQuery = queryBuilder.build();
            }
        }
        Query<Song> query = genre_SongsQuery.forCurrentThread();
        query.setParameter(0, genre);
        return query.list();
    }

    /** Internal query to resolve the "songs" to-many relationship of Playlist. */
    public List<Song> _queryPlaylist_Songs(Long playListId) {
        synchronized (this) {
            if (playlist_SongsQuery == null) {
                QueryBuilder<Song> queryBuilder = queryBuilder();
                queryBuilder.join(Link.class, LinkDao.Properties.SongId)
                    .where(LinkDao.Properties.PlayListId.eq(playListId));
                playlist_SongsQuery = queryBuilder.build();
            }
        }
        Query<Song> query = playlist_SongsQuery.forCurrentThread();
        query.setParameter(0, playListId);
        return query.list();
    }

    /** Internal query to resolve the "songs" to-many relationship of Album. */
    public List<Song> _queryAlbum_Songs(String album) {
        synchronized (this) {
            if (album_SongsQuery == null) {
                QueryBuilder<Song> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Album.eq(null));
                queryBuilder.orderRaw("T.'TRACK' ASC");
                album_SongsQuery = queryBuilder.build();
            }
        }
        Query<Song> query = album_SongsQuery.forCurrentThread();
        query.setParameter(0, album);
        return query.list();
    }

}
